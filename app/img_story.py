# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å cli –∏–∑ web –ø–æ–¥ –∏–º–µ–Ω–µ–º stcli
from streamlit.web import cli as stcli
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å sys
import sys
# –ò–∑ –º–æ–¥—É–ª—è streamlit –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å runtime
from streamlit import runtime
# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ runtime
runtime.exists()

import requests
import streamlit as st
import os
import pickle
import tensorflow as tf

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ VIST.bin
with open('VIST.bin', 'rb') as f:
    model = pickle.load(f)

def upload_and_process_image(image_data):
    client_id = 'API_KEY'
    headers = {'Authorization': f'Client-ID {client_id}'}
    
    url = 'https://api.imgur.com/3/image'
    files = {'image': image_data}
    response = requests.post(url, headers=headers, files=files)
    img_url = ''

    if response.status_code == 200:
        img_url = response.json()['data']['link']
        st.write('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', img_url)
    else:
        st.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + str(response.status_code))
        return None
    return img_url

def preprocess_image(image_url):
    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    response = requests.get(image_url)
    image = tf.image.decode_image(response.content, channels=3)
    image = tf.image.resize(image, [299, 299])
    image = tf.expand_dims(image, axis=0)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –±–∞—Ç—á–∞
    return image

def generate_narrative(model, image_urls):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—Ä—Ä–∞—Ç–∏–≤–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
    preprocessed_images = [preprocess_image(url) for url in image_urls]
    batch_images = tf.concat(preprocessed_images, axis=0)
    narrative = model.predict(batch_images)
    return narrative

def translate_to_russian(text):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    url = "https://translation.googleapis.com/language/translate/v2"
    params = {
        "q": text,
        "source": "en",
        "target": "ru",
        "format": "text",
        "key": os.getenv('API_KEY')
    }
    response = requests.post(url, params=params)
    if response.status_code == 200:
        translated_text = response.json()["data"]["translations"][0]["translatedText"]
        return translated_text
    else:
        st.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: ' + str(response.status_code))
        return text

def VIST(image_urls):
    # –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Ä—Ä–∞—Ç–∏–≤–∞
    narrative = generate_narrative(model, image_urls)
    translated_narrative = translate_to_russian(narrative)
    return translated_narrative

def main():
    st.title("üì∏ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    st.write("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–æ–≤–Ω–æ 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è.")
    uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", type=["jpg", "png"], accept_multiple_files=True)
    if uploaded_files:
        if len(uploaded_files) != 5:
            st.error("–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ–≤–Ω–æ 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
            return

        img_urls = []
        for uploaded_file in uploaded_files:
            bytes_data = uploaded_file.getvalue()
            img_url = upload_and_process_image(bytes_data)
            if img_url:
                img_urls.append(img_url)
        
        if img_urls:
            narrative = VIST(img_urls)
            st.text_area("–ü–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", narrative, height=200)
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ.")

    st.write("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–æ–π –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏ –ê–Ω—Ç—Ä–æ–ø–æ–≤–æ–π –ù.–ì.")

# –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if __name__ == '__main__':
    # –ï—Å–ª–∏ runtime —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if runtime.exists():
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main()
        main()
    # –ï—Å–ª–∏ runtime –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    else:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        sys.argv = ["streamlit", "run", sys.argv[0]]
        # –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ main() –∏–∑ –º–æ–¥—É–ª—è stcli
        sys.exit(stcli.main())
